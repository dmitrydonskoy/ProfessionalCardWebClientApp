@model ProfessionGraphDTO
@using ProfessionalCardWebClientApp.DTO

@{
    ViewData["Title"] = "Карта профессий";
}

<h1 class="mb-4">@ViewData["Title"]</h1>

<div class="container mb-3">
    <h4>Фильтр категорий</h4>
    <div class="d-flex flex-wrap gap-2 mb-2">
        <button class="btn btn-outline-primary btn-sm" onclick="selectAllCategories()">Выбрать все</button>
        <button class="btn btn-outline-danger btn-sm" onclick="clearAllCategories()">Очистить</button>
        <button class="btn btn-success btn-sm ms-auto" onclick="toggleFullscreen()">Полноэкранный режим</button>
    </div>
    <ul id="category-filters" class="list-unstyled d-flex flex-wrap gap-3"></ul>
</div>

<div id="profession-network" style="width: 100%; height: 85vh; border: 1px solid lightgray; border-radius: 5px;"></div>


<div id="profession-modal" class="modal">
    <div class="modal-content">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="btn-group">
               
                <button id="back-button" class="btn btn-outline-secondary btn-sm" onclick="goBack()" style="display: none;">← Назад</button>
                <button id="forward-button" class="btn btn-outline-secondary btn-sm" onclick="goForward()" style="display: none;">Вперёд →</button>
            </div>
            <span class="close" onclick="closeModal()">&times;</span>
            <button type="button" class="btn-close" aria-label="Закрыть" onclick="closeModal()"></button>
        </div>
        <h2 id="modal-title"></h2>
        <p id="modal-description"></p>

        <button id="toggle-skills-btn" class="btn btn-outline-primary btn-sm mb-2">Показать навыки</button>
        <div id="profession-skills" style="display: none;">
            <h4>IT-навыки</h4>
            <div id="skills-container"><p class="text-muted">Загрузка...</p></div>
        </div>

        <button id="career-path-btn" class="btn btn-success mt-3">Построить карьерный путь</button>

        <h4 class="mt-4">Связанные профессии</h4>
        <div id="related-profession-network" style="width: 100%; height: 300px; border: 1px solid #ddd;"></div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const professions = @Html.Raw(Json.Serialize(Model.Professions));
            const relations = @Html.Raw(Json.Serialize(Model.Relations));

            let professionHistory = [];
            let historyIndex = -1;

            const categoryColors = {
                'Техподдержка': '#ff6666',
                'Аппаратная разработка': '#ff7f7f',
                'Системное администрирование': '#66cc66',
                'Информационная безопасность': '#66ccff',
                'Тестирование и управление качеством': '#ffcc00',
                'Создание цифрового продукта': '#66cc66',
                'Данные и аналитика': '#99cc00',
                'Управление разработкой и архитектурой': '#66b3b3',
                'Дизайн и UX/UI': '#b3b3ff'
            };

            const categories = [...new Set(professions.map(p => p.category))];

            const filterContainer = document.getElementById("category-filters");
            categories.forEach(cat => {
                const cb = document.createElement("input");
                cb.type = "checkbox";
                cb.value = cat;
                cb.checked = true;
                cb.onchange = updateGraph;

                const label = document.createElement("label");
                label.innerHTML = `⬤ ${cat}`;
                label.style.color = categoryColors[cat] || "#000";
                label.style.marginLeft = "5px";

                const li = document.createElement("li");
                li.appendChild(cb);
                li.appendChild(label);
                filterContainer.appendChild(li);
            });

            const nodes = new vis.DataSet();
            const edges = new vis.DataSet();

            const container = document.getElementById("profession-network");
            const data = { nodes, edges };

            const options = {
                layout: {
                    hierarchical: false,
                    improvedLayout: true
                },
                physics: {
                    enabled: true,
                    solver: "repulsion",
                    repulsion: {
                        nodeDistance: 350,
                        springLength: 200,
                        springConstant: 0.01,
                        damping: 0.1
                    }
                },
                interaction: {
                    hover: true,
                    zoomView: true,
                    dragNodes: true
                }
            };

            const network = new vis.Network(container, data, options);

            network.on("doubleClick", function (params) {
                if (params.nodes.length > 0) {
                    const id = params.nodes[0];
                    const profession = professions.find(p => p.id === id);
                    if (profession) {
                        professionHistory = professionHistory.slice(0, historyIndex + 1);
                        professionHistory.push(profession);
                        historyIndex++;
                        showModal(profession);
                    }
                }
            });

            function updateGraph() {
                const selected = Array.from(document.querySelectorAll('#category-filters input:checked')).map(cb => cb.value);
                nodes.clear();
                edges.clear();

                nodes.add({
                    id: 'root',
                    label: 'Карта профессий',
                    shape: 'circle',
                    color: '#333399',
                    font: {
                        color: '#fff',
                        size: 44,
                        face: "Segoe UI",
                        bold: true
                    },
                    shadow: true
                });

                selected.forEach(cat => {
                    const catId = `cat-${cat}`;
                    nodes.add({
                        id: catId,
                        label: cat,
                        shape: "box",
                        color: categoryColors[cat] || '#ccc',
                        font: {
                            size: 24,
                            face: "Segoe UI",
                            bold: true
                        },
                        borderWidth: 3,
                        shadow: true
                    });

                    edges.add({
                        from: 'root',
                        to: catId,
                        arrows: "to",
                        color: { color: '#6666cc' }
                    });

                    professions.filter(p => p.category === cat).forEach(p => {
                        nodes.add({
                            id: p.id,
                            label: p.name,
                            title: p.description,
                            shape: "box",
                            color: categoryColors[p.category] || "#ccc",
                            font: {
                                size: 20,
                                face: "Segoe UI",
                                bold: true
                            },
                            borderWidth: 2,
                            shadow: true
                        });

                        edges.add({
                            from: catId,
                            to: p.id,
                            arrows: "to",
                            color: { color: "#aaa" }
                        });
                    });
                }); // ← закрываем selected.forEach

            }


            function showModal(profession) {
                document.getElementById("modal-title").innerText = profession.name;
                document.getElementById("modal-description").innerText = profession.description;
                document.getElementById("profession-modal").style.display = "block";

                document.getElementById("back-button").style.display = historyIndex > 0 ? "inline-block" : "none";
                document.getElementById("forward-button").style.display = historyIndex < professionHistory.length - 1 ? "inline-block" : "none";

                document.getElementById("toggle-skills-btn").innerText = "Показать навыки";
                document.getElementById("profession-skills").style.display = "none";

                document.getElementById("toggle-skills-btn").onclick = () => {
                    const block = document.getElementById("profession-skills");
                    const isVisible = block.style.display === "block";
                    if (!isVisible) {
                        $("#skills-container").html("Загрузка...");
                        $.get(`/ProfessionGraph/GetSkillsPartial?id=${profession.id}`, html => {
                            $("#skills-container").html(html);
                        });
                    }
                    block.style.display = isVisible ? "none" : "block";
                    document.getElementById("toggle-skills-btn").innerText = isVisible ? "Показать навыки" : "Скрыть навыки";
                };

                document.getElementById("career-path-btn").onclick = () => {
                    window.location.href = `/Career?targetProfessionId=${profession.id}`;
                };

                const relatedNodes = [profession].concat(professions.filter(p =>
                    relations.some(r => (r.sourceProfessionId === profession.id && r.targetProfessionId === p.id) ||
                        (r.targetProfessionId === profession.id && r.sourceProfessionId === p.id))
                ));

                const relatedEdges = relations
                    .filter(r => r.sourceProfessionId === profession.id || r.targetProfessionId === profession.id)
                    .map(r => ({
                        from: r.sourceProfessionId,
                        to: r.targetProfessionId,
                        arrows: 'to',
                        color: { color: '#888' }
                    }));

                const relatedData = {
                    nodes: new vis.DataSet(relatedNodes.map(p => ({
                        id: p.id,
                        label: p.name,
                        shape: 'box',
                        color: categoryColors[p.category] || '#ccc'
                    }))),
                    edges: new vis.DataSet(relatedEdges)
                };

                const relatedOptions = {
                    layout: { improvedLayout: true },
                    interaction: { hover: true, zoomView: true }
                };

                const relatedContainer = document.getElementById("related-profession-network");
                const relatedNetwork = new vis.Network(relatedContainer, relatedData, relatedOptions);

                relatedNetwork.on("doubleClick", params => {
                    if (params.nodes.length > 0) {
                        const next = professions.find(p => p.id === params.nodes[0]);
                        if (next) {
                            professionHistory = professionHistory.slice(0, historyIndex + 1);
                            professionHistory.push(next);
                            historyIndex++;
                            showModal(next);
                        }
                    }
                });
            }

            window.goBack = function () {
                if (historyIndex > 0) {
                    historyIndex--;
                    showModal(professionHistory[historyIndex]);
                }
            };

            window.goForward = function () {
                if (historyIndex < professionHistory.length - 1) {
                    historyIndex++;
                    showModal(professionHistory[historyIndex]);
                }
            };

            window.closeModal = function () {
                document.getElementById("profession-modal").style.display = "none";
            };

            window.toggleFullscreen = function () {
                const container = document.getElementById("profession-network");
                if (!document.fullscreenElement) {
                    container.requestFullscreen?.().then(() => {
                        setTimeout(() => network.redraw(), 300);
                    });
                } else {
                    document.exitFullscreen?.().then(() => {
                        setTimeout(() => network.redraw(), 300);
                    });
                }
            };

            window.selectAllCategories = function () {
                document.querySelectorAll('#category-filters input').forEach(cb => cb.checked = true);
                updateGraph();
            };

            window.clearAllCategories = function () {
                document.querySelectorAll('#category-filters input').forEach(cb => cb.checked = false);
                updateGraph();
            };

            updateGraph();
        });
    </script>
}

<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
    }


    .close {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 26px;
        cursor: pointer;
    }

    .btn {
        font-weight: 500;
    }


    .list-unstyled label {
        margin-left: 4px;
        font-weight: 500;
    }


    #profession-network {
        background-color: #f9f9f9;
    }

    .modal-content {
        width: 80%;
        max-width: 900px;
        margin-top: 3%;
        padding: 30px 20px;
        position: relative;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #333;
    }

    .btn-group .btn {
        margin-right: 6px;
    }
</style>
