@model CareerPathViewModel
@using ProfessionalCardWebClientApp.DTO
@using System.Text.Json

@{
    ViewData["Title"] = "Карьерный путь";
}

<div class="container mt-4">
    <h2 class="mb-4">Карьерный путь</h2>

    <!-- Главная форма для Index -->
    <form method="get" asp-controller="Career" asp-action="Index" class="mb-4">
        <div class="row g-3">
            <div class="col-md-4">
                <label for="currentProfession" class="form-label fw-bold">Текущая профессия</label>
                <select name="selectedCurrentProfessionName" id="currentProfession" class="form-select">
                    @foreach (var prof in Model.AvailableProfessions)
                    {
                        <option value="@prof.Name" selected="@(prof.Name == Model.SelectedCurrentProfessionName)">
                            @prof.Name (@prof.Category)
                        </option>
                    }
                </select>
            </div>

            <div class="col-md-3">
                <label class="form-label fw-bold">Текущий уровень</label>
                <select name="selectedCurrentProfessionLevel" class="form-select">
                    @foreach (var level in new[] { "Junior", "Middle", "Senior", "Manager" })
                    {
                        <option value="@level" selected="@(level == Model.SelectedCurrentProfessionLevel)">
                            @level
                        </option>
                    }
                </select>
            </div>

            <div class="col-md-4">
                <label for="targetProfessionId" class="form-label fw-bold">Целевая профессия</label>
                <select name="targetProfessionId" id="targetProfessionId" class="form-select">
                    @foreach (var prof in Model.AvailableProfessions)
                    {
                        <option value="@prof.Id" selected="@(prof.Id == Model.SelectedProfessionId)">
                            @prof.Name (@prof.Category)
                        </option>
                    }
                </select>
            </div>
        </div>

        <input type="hidden" id="selectedProfessionIdHidden" name="selectedProfessionId" value="@Model.SelectedProfessionId" />

        <div class="mt-3 d-flex justify-content-end">
            <button type="submit" class="btn btn-primary px-4 me-2">Сгенерировать путь</button>
        </div>
    </form>

    <!-- Кнопки сравнения и избранного -->
    @if (Context.Session.GetInt32("UserId") != null)
    {
        var isDisabled = Model.SelectedProfessionId == null ? "disabled" : "";

        <form method="get" asp-controller="Career" asp-action="CompareWithSkills" class="d-inline me-2">
            <input type="hidden" id="compareProfessionId" name="targetProfessionId" value="@Model.SelectedProfessionId" />
            <button type="submit" class="btn btn-outline-success px-4" @isDisabled>Сравнить с моими навыками</button>
        </form>

        <form method="post" asp-controller="Career" asp-action="AddToFavorites" class="d-inline">
            <input type="hidden" id="favoriteProfessionId" name="professionId" value="@Model.SelectedProfessionId" />
            <button type="submit" class="btn btn-outline-warning px-4" @isDisabled>
                ⭐ Добавить в избранное
            </button>
        </form>
    }
    

    @if (Model.CareerPath != null && (
    Model.CareerPath.JuniorSkills.Any() ||
    Model.CareerPath.MiddleSkills.Any() ||
    Model.CareerPath.SeniorSkills.Any() ||
    Model.CareerPath.ManagerSkills.Any() ||
    Model.CareerPath.AlternativePaths.Any()
    ))
    {
        <div class="mb-2">
            <strong>Прогресс по IT-skills:</strong>
            <div class="d-flex flex-column">
                <div><span class="badge" style="background-color: #f8d7da;">0–30%</span> – Низкий</div>
                <div><span class="badge" style="background-color: #fff3cd;">30–60%</span> – Средний</div>
                <div><span class="badge" style="background-color: #d4edda;">60–90%</span> – Хороший</div>
                <div><span class="badge" style="background-color: #cce5ff;">90–100%</span> – Отличный</div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <div id="career-roadmap-graph" style="height: 900px; border: 1px solid #ccc;"></div>
            </div>
            <div class="col-md-4">
                <div class="mb-2">
                    <strong>Легенда:</strong>
                    <div>
                        <span class="badge bg-success me-1">🟩 Навык есть</span>
                        <span class="badge bg-danger">🟥 Навык отсутствует</span>
                    </div>
                </div>

                <div class="mb-2">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input skill-filter" type="radio" name="skillFilter" id="filter-all" value="all" checked>
                        <label class="form-check-label" for="filter-all">Все</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input skill-filter" type="radio" name="skillFilter" id="filter-has" value="has">
                        <label class="form-check-label" for="filter-has">Имеющиеся</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input skill-filter" type="radio" name="skillFilter" id="filter-not" value="not">
                        <label class="form-check-label" for="filter-not">Отсутствующие</label>
                    </div>
                </div>

                <div id="skills-table" class="mb-4"></div>

            </div>
        </div>
    }
</div>

@section Scripts {
    
    <script src="https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js"></script>
    <script>
        const userIsAuthenticated = @((Context.Session.GetInt32("UserId") != null).ToString().ToLower());
    
            // Автообновление скрытых полей при смене target-профессии
            document.getElementById("targetProfessionId").addEventListener("change", function () {
                const selectedId = this.value;
                document.getElementById("selectedProfessionIdHidden").value = selectedId;
                document.getElementById("compareProfessionId").value = selectedId;
                document.getElementById("favoriteProfessionId").value = selectedId;

                // Активировать кнопки если были disabled
                document.querySelectorAll("form button[disabled]").forEach(btn => btn.removeAttribute("disabled"));
            });
        document.addEventListener("DOMContentLoaded", function () {
            const currentProfession = @Html.Raw(JsonSerializer.Serialize(Model.SelectedCurrentProfessionName ?? "Не выбрано"));
            const currentLevel = @Html.Raw(JsonSerializer.Serialize(Model.SelectedCurrentProfessionLevel ?? "Не выбрано"));
            const targetProfessionText = document.querySelector("#targetProfessionId option:checked")?.textContent ?? "";
            const targetProfession = targetProfessionText.split('(')[0].trim();
            const isPersonalizedComparison = @Model.IsPersonalizedComparison.ToString().ToLower();
            const roadmapData = {
                "Junior": @Html.Raw(JsonSerializer.Serialize(Model.CareerPath.JuniorSkills)),
                "Middle": @Html.Raw(JsonSerializer.Serialize(Model.CareerPath.MiddleSkills)),
                "Senior": @Html.Raw(JsonSerializer.Serialize(Model.CareerPath.SeniorSkills)),
                "Lead": @Html.Raw(JsonSerializer.Serialize(Model.CareerPath.ManagerSkills))
            };

            const altPaths = @Html.Raw(JsonSerializer.Serialize(Model.CareerPath.AlternativePaths ?? new List<AlternativeCareerPathDTO>()));
            const hasAlternatives = altPaths.length > 0;

            function calculateItSkillsProgress(skills) {
                const itSkills = skills.filter(s => s.Category?.toLowerCase() === "it-skills");
                if (itSkills.length === 0) return 0;
                const completed = itSkills.filter(s => s.HasSkill).length;
                return (completed / itSkills.length) * 100;
            }

            function getNodeColorByProgress(progress) {
                if (progress >= 90) return "#cce5ff";
                if (progress >= 60) return "#d4edda";
                if (progress >= 30) return "#fff3cd";
                return "#f8d7da";
            }

            const levelOrder = ["Junior", "Middle", "Senior", "Lead"];
            const altLevelMap = { "Junior": 1, "Middle": 2, "Senior": 3 };
            const mainLevelMap = { "Junior": 4, "Middle": 5, "Senior": 6, "Lead": 7 };

            const nodes = [], edges = [];

            nodes.push({
                id: "start",
                label: `Начало – ${currentProfession} (${currentLevel})`,
                shape: "box",
                color: "#b3c6ff",
                font: { size: 22 },
                margin: 20,
                level: 0
            });

            levelOrder.forEach(level => {
                const skills = roadmapData[level] ?? [];
                const progress = calculateItSkillsProgress(skills);
                const id = `${level}-main`;

                nodes.push({
                    id: id,
                    label: `${level} – ${targetProfession}`,
                    shape: "box",
                    color: getNodeColorByProgress(progress),
                    font: { size: 24 },
                    margin: 30,
                    level: mainLevelMap[level]
                });

                if (level === "Junior" && !hasAlternatives) {
                    edges.push({ from: "start", to: id, arrows: "to" });
                } else if (level !== "Junior") {
                    const prev = levelOrder[levelOrder.indexOf(level) - 1];
                    edges.push({ from: `${prev}-main`, to: id, arrows: "to" });
                }
            });

            altPaths.forEach((alt, altIndex) => {
                let previousNodeId = "start";

                ["Junior", "Middle", "Senior"].forEach(level => {
                    const skills = alt[`${level}Skills`];
                    if (!skills || skills.length === 0) return;

                    const progress = calculateItSkillsProgress(skills);
                    const nodeId = `${level}-${alt.Name}-${altIndex}`;

                    nodes.push({
                        id: nodeId,
                        label: `${level} – ${alt.Name}`,
                        shape: "box",
                        color: getNodeColorByProgress(progress),
                        font: { size: 20 },
                        margin: 25,
                        level: altLevelMap[level]
                    });

                    edges.push({
                        from: previousNodeId,
                        to: nodeId,
                        arrows: "to",
                        color: { color: "#888" }
                    });

                    previousNodeId = nodeId;
                });

                edges.push({
                    from: previousNodeId,
                    to: "Junior-main",
                    arrows: "to",
                    dashes: true,
                    color: { color: "#999" }
                });
            });

            const container = document.getElementById("career-roadmap-graph");
            const network = new vis.Network(container, {
                nodes: new vis.DataSet(nodes),
                edges: new vis.DataSet(edges)
            }, {
                layout: {
                    hierarchical: {
                        direction: "UD",
                        levelSeparation: 220,
                        nodeSpacing: 250
                    }
                },
                interaction: { hover: true },
                physics: false
            });

            const skillsContainer = document.getElementById("skills-table");
            let activeNodeId = null;
            let currentSkillFilter = "all";

            const render = (title, skills) => {
                const it = skills.filter(s => s.Category?.toLowerCase() === "it-skills");
                const exp = skills.filter(s => s.Category?.toLowerCase() === "experience");

                const filtered = (arr) => {
                    if (currentSkillFilter === "has") return arr.filter(s => s.HasSkill);
                    if (currentSkillFilter === "not") return arr.filter(s => !s.HasSkill);
                    return arr;
                };

                const buildTable = (items) => `
                    <table class="table table-bordered table-sm">
                        <thead><tr><th>Навык</th><th>Статус</th></tr></thead>
                        <tbody>
                            ${items.map(s => `
                                <tr>
                                    <td>${s.Name}</td>
                                    <td class="${s.HasSkill ? 'has-skill' : 'not-learned'}">
                                        ${s.HasSkill
                                            ? '✅ Есть'
                        : (userIsAuthenticated && isPersonalizedComparison
                                                ? `<button class="btn btn-sm btn-success add-skill-btn" data-skill-id="${s.Id}">Добавить</button>`
                                                : '❌ Нет')}
                                    </td>
                                </tr>
                            `).join("")}
                        </tbody>
                    </table>`;

                skillsContainer.innerHTML = `
                    <div class="skills-block">
                        <h4>${title}</h4>
                        <div>
                            <h6>IT-skills</h6>
                            ${buildTable(filtered(it))}
                        </div>
                        <div>
                            <h6>Experience</h6>
                            ${buildTable(filtered(exp))}
                        </div>
                    </div>`;
            };

            network.on("click", function (params) {
                const nodeId = params.nodes[0];
                if (!nodeId) return;
                activeNodeId = nodeId;

                if (nodeId.endsWith("-main")) {
                    const level = nodeId.split("-")[0];
                    render(`${level} – ${targetProfession}`, roadmapData[level] ?? []);
                    return;
                }

                for (const alt of altPaths) {
                    for (const level of ["Junior", "Middle", "Senior"]) {
                        const altNodeId = `${level}-${alt.Name}`;
                        if (nodeId.startsWith(altNodeId)) {
                            render(`${level} – ${alt.Name}`, alt[`${level}Skills`] ?? []);
                            return;
                        }
                    }
                }
            });

            document.querySelectorAll(".skill-filter").forEach(radio => {
                radio.addEventListener("change", function () {
                    currentSkillFilter = this.value;
                    if (activeNodeId) {
                        network.emit("click", { nodes: [activeNodeId] });
                    }
                });
            });
        });

        document.addEventListener("click", async function (e) {
            if (e.target.classList.contains("add-skill-btn")) {
                const button = e.target;
                const skillId = button.getAttribute("data-skill-id");

                try {
                    const formData = new FormData();
                    formData.append("skillId", skillId);

                    const res = await fetch("/Career/AddSkillToUser", {
                        method: "POST",
                        body: formData
                    });

                    if (res.ok) {
                        button.outerHTML = "✅ Добавлено";
                        const td = button.closest("td");
                        td.classList.remove("not-learned");
                        td.classList.add("has-skill");
                    } else {
                        const msg = await res.text();
                        alert("Ошибка при добавлении навыка: " + msg);
                    }
                } catch (error) {
                    alert("Ошибка сети: " + error);
                }
            }
        });
    </script>
}



<style>
    .has-skill {
        color: green;
    }

    .not-learned {
        color: red;
    }
</style>
